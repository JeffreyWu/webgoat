## The fuzz target type. If unspecified, the type is derived from the
## extension of the fuzz target source file.
type: "java web app"

## Additional arguments to pass to the fuzz target when it is executed.
## Note that any relative paths are resolved relative to the root of the
## project directory.
#run_extra_args:
#  - "-c myapp.conf"

## List of web services fuzzed as part of this fuzz target.
## Note that the OpenAPI / Swagger spec and Spring Controller information is only used for the
## first web service in this list.
## The web service listed first should be the one reachable under the "base_url" specified below.
web_services:
  - "webgoat"

## Base URL of the application under test.
## 
## To enable TLS encryption set the scheme to "https://" or "grpcs://" depending on the
## selected protocol.
#base_url: "http://127.0.0.1:8080"
base_url: "http://192.168.122.163:8080"

## Protocol used to communicate with the software under test. Valid values are "http" and "grpc".
protocol: http

## List of HTTP path patterns that the fuzzer is allowed to contact.
## Patterns may contain "*", which matches at most up to the next "/",
## and "**", which matches any sequence of characters.
allowed_requests:
  - "**/auth-bypass/**"

## List of HTTP path patterns that the fuzzer is *not* allowed to contact.
## Patterns may contain "*", which matches at most up to the next "/",
## and "**", which matches any sequence of characters.
#denied_requests:
#  - "/some/path"

## If set, every request made by the fuzzer will contain this header with a
## unique tag as its value. Use this if you want to debug findings using log
## entries generated by the application under test.
#tag_header: X-Request-Id

## Generate coverage reports during fuzzer execution.
##
## By default a coverage report is generated on fuzzer exit. In some instances
## it can be useful to generate coverage reports earlier, for example if the
## application under test crashes on certain fuzzer inputs.
## Enabling this option will trigger coverage reports after every 
## <coverage_update_interval> requests.
## Note: Low numbers can negatively impact fuzzing performance.
#coverage_update_interval: 10000
